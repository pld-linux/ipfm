diff -urN ipfm-0.12.0pre1-orig/configure.in ipfm-0.12.0pre1/configure.in
--- ipfm-0.12.0pre1-orig/configure.in	2004-04-08 17:51:28.000000000 +0200
+++ ipfm-0.12.0pre1/configure.in	2004-04-09 00:55:36.000000000 +0200
@@ -140,6 +140,51 @@
 LIBS="$LIBS $libpcap"
 AC_SUBST(INCLS)
 
+
+
+dnl
+dnl Checks for libmysql
+dnl
+
+AC_MSG_CHECKING(for local libmysql)
+dnl checks for local libmysql lib
+mysqldirs=`ls .. | grep libmysql | sed -e 's:/$::' -e 's:^:../:' | tr '\n' ' '`
+libmysql=FAIL
+for mysqldir in `echo $mysqldirs` ; do
+  mysqldir=`pwd`/$mysqldir
+  if test -d $mysqldir -a -f $mysqldir/libmysql.a -a -f $mysqldir/mysql.h ; then
+    libmysql=$mysqldir/libmysqlclient.a
+    AC_MSG_RESULT(Using $libmysql)
+    INCLS="-I$mysqldir"
+    break
+  fi
+done
+
+dnl checks for mysql install
+if test "x$libmysql" = "xFAIL" ; then
+  AC_MSG_RESULT(no)
+  AC_CHECK_LIB(mysqlclient, main, libmysql="-lmysqlclient", AC_MSG_ERROR(You need libmysqlclient in order to use ipfm))
+  mysqldir=""
+  dnl I ought to put here a test to find where mysql.h is
+  AC_CHECK_HEADER(mysql.h,, NO_mysql_H=1)
+  if test "x$NO_mysql_H" = "x1"; then
+    AC_MSG_CHECKING(for exotic mysql.h places)
+    if test -r /usr/include/mysql/mysql.h; then
+      INCLS="$INCLS -I/usr/include/mysql"
+      AC_MSG_RESULT(/usr/include/mysql/)
+    else if test -r /usr/local/include/mysql.h; then
+      INCLS="$INCLS -I/usr/local/include"
+      AC_MSG_RESULT(/usr/local/include/)
+    else
+      AC_MSG_WARN(mysql.h not found.)
+      AC_MSG_WARN(Specify mysql.h PATH in source/Makefile (INCLS=-I/mysql/path))
+    fi; fi
+  fi
+fi
+LIBS="$LIBS $libmysql"
+AC_SUBST(INCLS)
+
+
 dnl Checks for typedefs, structures, and compiler characteristics.
 if test "x$CC" = "xgcc" ; then
   WARNINGS="-Wall"
diff -urN ipfm-0.12.0pre1-orig/HISTORY ipfm-0.12.0pre1/HISTORY
--- ipfm-0.12.0pre1-orig/HISTORY	2004-04-08 17:51:28.000000000 +0200
+++ ipfm-0.12.0pre1/HISTORY	2004-04-09 14:39:11.000000000 +0200
@@ -1,3 +1,7 @@
+9 april 2004
+------------
+- added mysql support (propably need some work more)
+
 Version 0.12.0pre1 - 24 november 2002
 ------------------
 - added debug messages
diff -urN ipfm-0.12.0pre1-orig/INSTALL ipfm-0.12.0pre1/INSTALL
--- ipfm-0.12.0pre1-orig/INSTALL	2004-04-08 17:51:28.000000000 +0200
+++ ipfm-0.12.0pre1/INSTALL	2004-04-09 14:46:44.000000000 +0200
@@ -1,5 +1,5 @@
 IPFM is designed to work on every un*x system.
-IPFM is developed under Linux libc6 (Debian woody).
+IPFM is developed under Linux libc6 (Debian woody & PLD-Linux AC).
 It was reported to work under Linux libc5 (slackware) and libc6 (RedHat,
 SuSE), FreeBSD, OpenBSD, IRIX, and AIX.
 As we can't test new versions under these OSes, there might be problems. Please
@@ -10,11 +10,13 @@
 * pcap library (ftp://ftp.ee.lbl.gov/libpcap.tar.Z)
 * yacc or equivalent (bison is used for development)
 * lex or equivalent (lex is used for development)
+* mysql library (www.mysql.com)
 
 Installation
 ------------
 Installing the program is done with a standard:
 
+	autoconf
 	./configure (see ./configure --help for options)
 	make
 	make install
diff -urN ipfm-0.12.0pre1-orig/ipfm.conf.sample ipfm-0.12.0pre1/ipfm.conf.sample
--- ipfm-0.12.0pre1-orig/ipfm.conf.sample	2004-04-08 17:51:28.000000000 +0200
+++ ipfm-0.12.0pre1/ipfm.conf.sample	2004-04-09 17:10:12.492336000 +0200
@@ -6,6 +6,35 @@
 # UTC to output times in UTC, not local time
 #UTC
 
+# database configuration (mysql only so far)
+# leave DB_TABLE empty in LOGGING SECTIONS to set logging to db off
+
+DB_HOST "localhost"
+DB_PORT "3306"
+
+DB_USERNAME "stat_dbuser"
+DB_PASSWORD "secret"
+
+DB_NAME "statistics"
+DB_TABLE_PREFIX "ipfm_"
+
+
+
+## you have to create tables on your own (see example below)
+#
+#CREATE TABLE `ipfm_sample` (
+#  `id` INT UNSIGNED DEFAULT '0' NOT NULL AUTO_INCREMENT ,
+#  `host` VARCHAR( 128 ) NOT NULL ,
+#  `in` BIGINT UNSIGNED NOT NULL ,
+#  `out` BIGINT UNSIGNED NOT NULL ,
+#  `time` DATETIME NOT NULL ,
+#  `delta` INT UNSIGNED NOT NULL ,
+#  PRIMARY KEY ( `id` ) 
+#) COMMENT = 'Sample table in IPFM';
+#
+# you can add more keys/fields if you want
+
+
 # analyses configurations
 
 ##### FIRST LOGGING CONFIGURATION #####
@@ -16,6 +45,7 @@
 LOG NONE 10.10.10.10 WITH 10.10.10.20
 
 FILENAME "/var/log/ipfm/%Y_%d_%m/%H_%M"
+DB_TABLE "sample"
 
 # log every hour at exactly 0:05, 1:05, 2:05 etc.
 DUMP EVERY 1 hour AFTER 5 minutes
@@ -41,6 +71,8 @@
 
 
 FILENAME "/var/log/ipfm/subnet/%Y_%d_%m_%H"
+DB_TABLE ""
+
 # Log every hour
 DUMP EVERY 1 hour
 # Clear statistics every day at 2:00am UTC
diff -urN ipfm-0.12.0pre1-orig/Makefile.in ipfm-0.12.0pre1/Makefile.in
--- ipfm-0.12.0pre1-orig/Makefile.in	2004-04-08 17:51:28.000000000 +0200
+++ ipfm-0.12.0pre1/Makefile.in	2004-04-09 15:06:45.000000000 +0200
@@ -35,7 +35,9 @@
 	$(RM) config.cache config.log config.status \
 	  Makefile Makefile.common *~ core \
 	  source/Makefile source/*~ source/core source/config.h \
-	  source/missing/Makefile doc/Makefile doc/*~
+	  source/missing/Makefile doc/Makefile doc/*~ \
+	  configure
+	$(RM) -r autom4te.cache
 
 configdump:
 	@echo "Configuration:" && \
diff -urN ipfm-0.12.0pre1-orig/source/config.h.in ipfm-0.12.0pre1/source/config.h.in
--- ipfm-0.12.0pre1-orig/source/config.h.in	2004-04-08 17:51:28.000000000 +0200
+++ ipfm-0.12.0pre1/source/config.h.in	2004-04-09 12:33:59.000000000 +0200
@@ -3,6 +3,7 @@
  *
  * Copyright (c) 1999 Robert CHERAMY <tibob@via.ecp.fr>
  * Copyright (c) 2001 Loïc Tortay & IN2P3 Computing Center <tortay@cc.in2p3.fr>
+ * Copyright (c) 2004 Pawe³ ¯urowski <pzurowski@post.pl>
  *
  */
  
@@ -18,6 +19,7 @@
 #define DEFAULT_OPTIONS_PROMISC       1
 #define DEFAULT_OPTIONS_APPEND        0
 #define DEFAULT_OPTIONS_TIMEZONE      local
+#define DEFAULT_OPTIONS_LOGDBTABLE    ""
 
 /* But leave these defines untouched */
 
diff -urN ipfm-0.12.0pre1-orig/source/config.l ipfm-0.12.0pre1/source/config.l
--- ipfm-0.12.0pre1-orig/source/config.l	2004-04-08 17:51:28.000000000 +0200
+++ ipfm-0.12.0pre1/source/config.l	2004-04-08 20:18:09.000000000 +0200
@@ -4,6 +4,7 @@
   
   (c) 1999-2002 Robert Cheramy <robert@cheramy.net>
   (c) 2000      Samuel Hocevar <sam@via.ecp.fr>
+  (c) 2004      Pawe³ ¯urowski <pzurowski@post.pl>
  
   Thanks to Etienne BERNARD <eb@via.ecp.fr> for his
   * little manual for Lex and Yacc
@@ -68,6 +69,13 @@
 [Aa][Pp][Pp][Ee][Nn][Dd]         return APPEND;
 [Bb][Oo][Tt][Hh]                 return BOTH;
 [Cc][Ll][Ee][Aa][Rr]             return CLEAR;
+[Dd][Bb]_[Nn][Aa][Mm][Ee]        return DB_BASE;
+[Dd][Bb]_[Hh][Oo][Ss][Tt]        return DB_HOST;
+[Dd][Bb]_[Pp][Aa][Ss][Ss][Ww][Oo][Rr][Dd] return DB_PASS;
+[Dd][Bb]_[Pp][Oo][Rr][Tt]        return DB_PORT;
+[Dd][Bb]_[Tt][Aa][Bb][Ll][Ee]_[Pp][Rr][Ee][Ff][Ii][Xx] return DB_PREFIX;
+[Dd][Bb]_[Tt][Aa][Bb][Ll][Ee]    return DB_TABLE;
+[Dd][Bb]_[Uu][Ss][Ee][Rr][Nn][Aa][Mm][Ee] return DB_USER;
 [Dd][Ee][Vv][Ii][Cc][Ee]         return DEVICE;
 [Dd][Uu][Mm][Pp]                 return DUMP;
 [Ee][Vv][Ee][Rr][Yy]             return EVERY;
diff -urN ipfm-0.12.0pre1-orig/source/config.y ipfm-0.12.0pre1/source/config.y
--- ipfm-0.12.0pre1-orig/source/config.y	2004-04-08 17:51:28.000000000 +0200
+++ ipfm-0.12.0pre1/source/config.y	2004-04-09 00:26:41.000000000 +0200
@@ -5,6 +5,7 @@
   (c) 1999-2002 Robert Cheramy <robert@cheramy.net>
   (c) 2000      Samuel Hocevar <sam@via.ecp.fr>
   (c) 2001      Loïc Tortay & IN2P3 Computing Center <tortay@cc.in2p3.fr>
+  (c) 2004      Pawe³ ¯urowski <pzurowski@post.pl>
  
   Thanks to Etienne BERNARD <eb@via.ecp.fr> for his
   * little manual for Lex and Yacc
@@ -49,6 +50,8 @@
 #include "data.h"
 #include "utils.h"
 
+#include "db_mysql.h"
+
 void yyerror(char *);
 void parseerror(char *, int);
 int yylex(void);
@@ -63,6 +66,8 @@
 extern struct AllLogsType *pAllLogs;
 extern int yydebug;
 
+extern DbMysqlConn MysqlConnection;
+
 ipfm_timezone tz;
 
 #ifdef YYDEBUG
@@ -88,6 +93,13 @@
 %token CLEAR
 %token DEVICE
 %token DUMP
+%token DB_BASE
+%token DB_HOST
+%token DB_PASS
+%token DB_PORT
+%token DB_TABLE
+%token DB_PREFIX
+%token DB_USER
 %token EOL
 %token EVERY
 %token FILENAME
@@ -244,6 +256,7 @@
           pNewLog->ClearCounter = DEFAULT_OPTIONS_CLEARCOUNTER;
           pNewLog->NextDump = ((time(NULL) / DEFAULT_OPTIONS_DUMPINTERVAL) + 1) * DEFAULT_OPTIONS_DUMPINTERVAL;
           pNewLog->LogFile = strdup(DEFAULT_OPTIONS_LOGFILE);
+          pNewLog->LogDbTable = strdup(DEFAULT_OPTIONS_LOGDBTABLE);
           pNewLog->Sort = DEFAULT_OPTIONS_SORT;
           pNewLog->SortFunc = NULL;
           pNewLog->ReverseLookup = DEFAULT_OPTIONS_REVERSELOOKUP;
@@ -258,6 +271,26 @@
       | UNIVERSALTIME EOL {
           tz = UTC;
         }
+      | DB_BASE STRING EOL {
+	      MysqlConnection.db_base = $2;
+		}
+      | DB_HOST STRING EOL {
+	      MysqlConnection.db_host = $2;
+		}
+      | DB_PASS STRING EOL {
+	      MysqlConnection.db_pass = $2;
+		}
+// TODO: port
+      | DB_PREFIX STRING EOL {
+	      MysqlConnection.db_prefix = $2;
+		}
+      | DB_USER STRING EOL {
+	      MysqlConnection.db_user = $2;
+		}
+      | DB_TABLE STRING EOL {
+          xfree(pAllLogs->LogDbTable);
+          pAllLogs->LogDbTable = $2;
+        }
       | error EOL {
           parseerror("Skipping invalid line", line);
         }
diff -urN ipfm-0.12.0pre1-orig/source/data.c ipfm-0.12.0pre1/source/data.c
--- ipfm-0.12.0pre1-orig/source/data.c	2004-04-08 17:51:28.000000000 +0200
+++ ipfm-0.12.0pre1/source/data.c	2004-04-09 17:06:21.352474600 +0200
@@ -49,11 +49,15 @@
 #include "init.h"
 #include "utils.h"
 
+#include "db_mysql.h"
+
 extern struct OptionsType Options;
 extern struct AllLogsType *pAllLogs;
 extern char *device;
 extern ipfm_timezone tz;
 
+extern DbMysqlConn MysqlConnection;
+
 void data_add(struct AllLogsType *pLog, u_int32_t ip, int in, int out) {
   struct ipfm_data *p_datatmp;
 
@@ -104,18 +108,26 @@
 void data_dump(struct AllLogsType *pLog) {
   pid_t pid;
   char *FileName;
+  char *TableName;
+  int use_db=0, use_file=0, not_first_record=0; //flags
 
   FileName = timefile(pLog->LogFile, pLog->NextDump);
+  // null pointer in pLog->LogDbTable ??
+  TableName = xmalloc(strlen(MysqlConnection.db_prefix)+strlen(pLog->LogDbTable)+1);
+  sprintf(TableName, "%s%s", MysqlConnection.db_prefix, pLog->LogDbTable);
+  
   /* Avoid stdout conflicts between son and father */
   fflush(stdout);
   pid = fork();
   if (-1 == pid) {
     fprintf(stderr, "couldn't fork\n");
     xfree(FileName);
+    xfree(TableName);
     return;
   } else if (0 == pid) {
     FILE *logfile;
     char DataToFile[MAX_DATA_SIZE];
+    char DataToBase[MAX_DATA_SIZE];
     char *stringTime;
     char *timezonestring;
 
@@ -147,10 +159,20 @@
         }
       }
     }
+	use_file = (NULL != logfile);
+	/* open mysql */
+	if ((! pLog->LogDbTable) || (strlen(pLog->LogDbTable) < 1)){
+	  use_db = 0;
+	} else {
+	  use_db = ipfm_mysql_connect();
+    }
+
     xfree(FileName);
-    /* Check again if we could open the file */
-    if (NULL == logfile) {
-      fprintf(stderr, "Error opening log file. Exiting.\n");
+    /* Check again if we could open the file or connect to DB*/
+    if (!(use_db || use_file)) {
+      fprintf(stderr, "Error opening log file or connecting to DB. Exiting.\n");
+      if (use_db) ipfm_mysql_close();
+      xfree(TableName);
       /* As under linux, pcap uses atexit to restore non promiscuous mode,
          we use _exit() to avoid unsetting promiscuous mode when the child
          exits
@@ -158,6 +180,7 @@
       _exit(1);
     }
 
+  if (use_file) {
     stringTime = timefile("%Y/%m/%d %H:%M:%S", pLog->NextDump);
 
     fprintf(logfile, "# IPFMv%s %s (%s) -- dump every %ldd%02ld:%02ld:%02ld -- listening on %s\n",
@@ -173,9 +196,30 @@
 	    "In (bytes)",
 	    "Out (bytes)",
 	    "Total (bytes)");
+  }
+  if (use_db) {
+//INSERT INTO `ipfm_sample` ( `id` , `host` , `in` , `out` , `time` , `delta` ) 
+//VALUES (
+//'0', '127.0.0.1', '0', '0', '2004-03-12 04:12:00', '300'
+//);
+    ipfm_mysql_add("INSERT INTO `");
+    ipfm_mysql_add(TableName);
+    ipfm_mysql_add("` ( `id` , `host` , `in` , `out` , `time` , `delta` ) VALUES ");
+  }
+    xfree(TableName);
     while (NULL != pLog->Data) {
-      DataFormat(pLog, pLog->Data, DataToFile, MAX_DATA_SIZE);
-      fprintf(logfile, "%s", DataToFile);
+      if (use_file) {
+        DataFormat(pLog, pLog->Data, DataToFile, MAX_DATA_SIZE);
+        fprintf(logfile, "%s", DataToFile);
+      }
+      if (use_db) {
+        if (not_first_record) {
+	  ipfm_mysql_add(",");
+	}
+	not_first_record = 1;
+        DataDBFormat(pLog, pLog->Data, DataToBase, MAX_DATA_SIZE);
+	ipfm_mysql_add(DataToBase);
+      }
       /* Do not forget to free tables */
       if (NULL != pLog->Data->next) {
 	pLog->Data = pLog->Data->next;
@@ -186,13 +230,19 @@
       }
     }
     pLog->DataSize = 0;
-
+  if (use_file) {
     fprintf(logfile, "# end of dump %s\n", stringTime);
     xfree(stringTime);
     if (1 == pLog->Append) {
       fprintf(logfile, "\n");
     }
     fclose(logfile);
+  }
+  if (use_db) {
+    ipfm_mysql_add(";");
+    ipfm_mysql_commit();
+    ipfm_mysql_close();
+  }
     /* As under linux, pcap uses atexit to restore non promiscuous mode,
        we use _exit() to avoid unsetting promiscuous mode when the child
        exits
@@ -201,6 +251,7 @@
   }
   else {
     xfree(FileName);
+    xfree(TableName);
   }
 }
 
@@ -322,3 +373,20 @@
 	     pData->in + pData->out);
   }
 }
+
+void DataDBFormat(struct AllLogsType *pLog, struct ipfm_data *pData,
+                char *pFormatedData, int BufLen) {
+  struct in_addr addr;
+  char *res;
+
+  memset(pFormatedData, 0, BufLen);
+  addr.s_addr = pData->ip;
+
+  res = inet_ntoa(addr);
+  snprintf(pFormatedData, BufLen, "('0','%s','%" LONGINTFORMAT "','%" LONGINTFORMAT "',FROM_UNIXTIME('%ld'),'%ld')",
+	   res,
+	   pData->in, 
+	   pData->out, 
+	   (time_t)pLog->NextDump - pLog->DumpInterval,
+	   (unsigned long int)pLog->DumpInterval);
+}
diff -urN ipfm-0.12.0pre1-orig/source/data.h ipfm-0.12.0pre1/source/data.h
--- ipfm-0.12.0pre1-orig/source/data.h	2004-04-08 17:51:28.000000000 +0200
+++ ipfm-0.12.0pre1/source/data.h	2004-04-09 14:13:43.000000000 +0200
@@ -4,6 +4,7 @@
  *  (c) 1999-2001 Robert Cheramy <tibob@via.ecp.fr>
  *  (c) 1999      Andres Krapf <dae@via.ecp.fr>
  *  (c) 2001      Loïc Tortay & IN2P3 Computing Center <tortay@cc.in2p3.fr>
+ *  (c) 2004      Pawe³ ¯urowski <pzurowski@post.pl>
  *
  */
 
@@ -49,5 +50,7 @@
 int DataCompareTotal(const void *ptr1, const void *ptr2);
 void DataFormat(struct AllLogsType *pLog, struct ipfm_data *pData,
                 char *pFormatedData, int BufLen);
+void DataDBFormat(struct AllLogsType *pLog, struct ipfm_data *pData,
+                char *pFormatedData, int BufLen);
 
 #endif
diff -urN ipfm-0.12.0pre1-orig/source/db_mysql.c ipfm-0.12.0pre1/source/db_mysql.c
--- ipfm-0.12.0pre1-orig/source/db_mysql.c	1970-01-01 01:00:00.000000000 +0100
+++ ipfm-0.12.0pre1/source/db_mysql.c	2004-04-09 16:46:33.000000000 +0200
@@ -0,0 +1,149 @@
+/*
+ *  db_mysql.c - interface to mysql
+ *
+ *  Copyright (C) 2004 Pawe³ ¯urowski <pzurowski@post.pl>
+ *
+ */
+
+/*
+ *  This program is free software; you can redistribute it and/or modify
+ *  it under the terms of the GNU General Public License as published by
+ *  the Free Software Foundation; either version 2 of the License, or
+ *  (at your option) any later version.
+ *
+ *  This program is distributed in the hope that it will be useful,
+ *  but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ *  GNU General Public License for more details.
+ *
+ *  You should have received a copy of the GNU General Public License
+ *  along with this program; if not, write to the Free Software
+ *  Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
+ */
+
+
+#include<stdlib.h>
+#include<stdio.h>
+
+#include "utils.h"
+#include "string.h"
+
+#include "db_mysql.h"
+
+MYSQL MysqlConn;
+DbMysqlConn MysqlConnection = { 0, NULL, 0, NULL, NULL, NULL, NULL, &MysqlConn };
+char *MysqlQueryContainer = NULL;
+
+int
+ipfm_mysql_add(char *text)
+{
+	if ((! MysqlQueryContainer) || (strlen(text) + strlen(MysqlQueryContainer) >= MAX_QUERY_LENGTH)) {
+		fprintf(stderr, "Not enough space for DB query, or invalid call\n");
+		exit(3);
+	}
+	strncat(MysqlQueryContainer, text, MAX_QUERY_LENGTH - strlen(MysqlQueryContainer) - 1);
+	return 1;
+}
+
+int
+ipfm_mysql_connect(void)
+{
+	mysql_init(MysqlConnection.conn_ptr);
+	
+	if (mysql_real_connect(\
+				MysqlConnection.conn_ptr, \
+				MysqlConnection.db_host, \
+				MysqlConnection.db_user, \
+				MysqlConnection.db_pass, \
+				MysqlConnection.db_base, \
+				MysqlConnection.db_port, \
+				NULL, 0) ) {
+		// connection succesful
+		if (NULL != MysqlQueryContainer){
+			//container is not empty... empty it now
+			xfree(MysqlQueryContainer);
+		}
+		MysqlQueryContainer=(char *)xmalloc(MAX_QUERY_LENGTH);
+		MysqlQueryContainer[0]='\0';  //just in case
+		
+	}else{
+		if (mysql_errno(MysqlConnection.conn_ptr)) {
+			printf ("MySQL connection error %d: %s\n", mysql_errno(MysqlConnection.conn_ptr), mysql_error(MysqlConnection.conn_ptr));
+		}
+		return 0;
+	}
+	
+	return 1;
+}
+
+int
+ipfm_mysql_close(void)
+{
+	if (! MysqlConnection.conn_ptr)
+		mysql_close(MysqlConnection.conn_ptr);
+	if (! MysqlQueryContainer){
+		//container is not empty... empty it now
+		xfree(MysqlQueryContainer);
+	}
+	return 1;
+}
+
+int
+ipfm_mysql_wipepass(void)
+{
+	char *pass;
+	
+	pass = MysqlConnection.db_pass;
+	
+	while (*pass)
+		*(pass++)='\0';
+	
+	return 1;
+}
+
+
+unsigned long
+ipfm_mysql_commit(void)
+{
+	int res;
+	
+	if (! MysqlConnection.conn_ptr) {
+		fprintf(stderr, "Invalid call commit function: connection not available\n");
+		return 0;
+	}
+	if (! MysqlQueryContainer) {
+		fprintf(stderr, "Invalid call commit function: query not available\n");
+		return 0;
+	}
+	if (strlen(MysqlQueryContainer) < 20) {
+		fprintf(stderr, "Invalid call commit function: query invalid\n");
+		return 0;
+	}
+	
+	res = mysql_query(MysqlConnection.conn_ptr, MysqlQueryContainer);
+	
+	if (!res) {
+		return (unsigned long) mysql_affected_rows(MysqlConnection.conn_ptr);
+	}else{
+		fprintf(stderr, "MySQL error %d: %s\n",mysql_errno(MysqlConnection.conn_ptr), mysql_error(MysqlConnection.conn_ptr));
+		return 0;
+	}
+}
+
+/*
+int
+main(void)
+{
+	db_base="pzurowski";
+	db_host="192.168.2.1";
+	db_pass="haslo5594";
+	db_table="ipfm_";
+	db_user="pzurowski";
+	db_port=0;
+	
+	ipfm_mysql_close(ipfm_mysql_connect());
+	
+	return EXIT_SUCCESS;
+}
+
+*/
diff -urN ipfm-0.12.0pre1-orig/source/db_mysql.h ipfm-0.12.0pre1/source/db_mysql.h
--- ipfm-0.12.0pre1-orig/source/db_mysql.h	1970-01-01 01:00:00.000000000 +0100
+++ ipfm-0.12.0pre1/source/db_mysql.h	2004-04-09 12:33:08.000000000 +0200
@@ -0,0 +1,58 @@
+/*
+ *  db_mysql.h - interface to mysql
+ *
+ *  Copyright (C) 2004 Pawe³ ¯urowski <pzurowski@post.pl>
+ *
+ */
+
+/*
+ *  This program is free software; you can redistribute it and/or modify
+ *  it under the terms of the GNU General Public License as published by
+ *  the Free Software Foundation; either version 2 of the License, or
+ *  (at your option) any later version.
+ *
+ *  This program is distributed in the hope that it will be useful,
+ *  but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ *  GNU General Public License for more details.
+ *
+ *  You should have received a copy of the GNU General Public License
+ *  along with this program; if not, write to the Free Software
+ *  Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
+ */
+
+#ifndef DB_MYSQL_H
+#define DB_MYSQL_H
+
+#include "mysql.h"
+
+#define MAX_QUERY_LENGTH 65535
+
+typedef struct {
+	int enabled;
+	char *db_host;
+	unsigned int db_port;
+	char *db_user;
+	char *db_pass;
+	char *db_base;
+	char *db_prefix;
+	MYSQL *conn_ptr;
+} DbMysqlConn;
+
+
+/* connects with mysql (using global MysqlConnection) */
+int ipfm_mysql_connect(void);
+
+/* adds some text to the actual query */
+int ipfm_mysql_add(char *text);
+
+/* does/commits a query */
+unsigned long ipfm_mysql_commit(void);
+
+/* closes opened conection */
+int ipfm_mysql_close(void);
+
+/* wipes password in global MysqlConnection */
+int ipfm_mysql_wipepass(void);
+
+#endif
diff -urN ipfm-0.12.0pre1-orig/source/filter.h ipfm-0.12.0pre1/source/filter.h
--- ipfm-0.12.0pre1-orig/source/filter.h	2004-04-08 17:51:28.000000000 +0200
+++ ipfm-0.12.0pre1/source/filter.h	2004-04-08 21:19:02.000000000 +0200
@@ -4,6 +4,7 @@
  *  (c) 1999-2001 Robert Cheramy <robert@cheramy.net>
  *  (c) 1999      Andres Krapf <dae@via.ecp.fr>
  *  (c) 2001      Loïc Tortay & IN2P3 Computing Center <tortay@cc.in2p3.fr>
+ *  (c) 2004      Pawe³ ¯urowski <pzurowski@post.pl>
  *
  */
 
@@ -68,6 +69,8 @@
   int ReverseLookup;
   int Append;
 
+  char *LogDbTable;
+
   unsigned long int NextDump;
   unsigned long int DumpInterval;
   unsigned long int ClearCounter;
diff -urN ipfm-0.12.0pre1-orig/source/init.c ipfm-0.12.0pre1/source/init.c
--- ipfm-0.12.0pre1-orig/source/init.c	2004-04-08 17:51:28.000000000 +0200
+++ ipfm-0.12.0pre1/source/init.c	2004-04-08 21:28:27.000000000 +0200
@@ -4,6 +4,7 @@
   (c) 1999      Andres Krapf <dae@via.ecp.fr>
   (c) 2000      Samuel Hocevar <sam@via.ecp.fr>
   (c) 2002      Robert Chéramy <robert@cheramy.net>
+  (c) 2004      Pawe³ ¯urowski <pzurowski@post.pl>
 
   200010 : sam   : pid file & daemon mode handling
   200011 : tibob : SIGUSR1 handling
@@ -188,6 +189,7 @@
   pNewLog->ClearCounter = DEFAULT_OPTIONS_CLEARCOUNTER;
   pNewLog->NextDump = ((time(NULL) / DEFAULT_OPTIONS_DUMPINTERVAL) + 1) * DEFAULT_OPTIONS_DUMPINTERVAL;
   pNewLog->LogFile = xstrdup(DEFAULT_OPTIONS_LOGFILE);
+  pNewLog->LogDbTable = xstrdup(DEFAULT_OPTIONS_LOGDBTABLE);
   pNewLog->Sort = DEFAULT_OPTIONS_SORT;
   pNewLog->SortFunc = NULL;
   pNewLog->ReverseLookup = DEFAULT_OPTIONS_REVERSELOOKUP;
@@ -347,6 +349,10 @@
       if (pTempLog->LogFile) {
 	xfree (pTempLog->LogFile);
       }
+	  
+      if (pTempLog->LogDbTable) {
+	xfree (pTempLog->LogDbTable);
+      }
 
       if (NULL == pPrevLog) {
 	pAllLogs = pTempLog->Next;
diff -urN ipfm-0.12.0pre1-orig/source/ipfm.c ipfm-0.12.0pre1/source/ipfm.c
--- ipfm-0.12.0pre1-orig/source/ipfm.c	2004-04-08 17:51:28.000000000 +0200
+++ ipfm-0.12.0pre1/source/ipfm.c	2004-04-09 01:32:51.000000000 +0200
@@ -7,6 +7,7 @@
  (c) 1999-2002 Robert Cheramy <robert@cheramy.net>
  (c) 2000      Samuel Hocevar <sam@via.ecp.fr>
  (c) 1999      Andres Krapf <dae@via.ecp.fr>
+ (c) 2004      Pawe³ ¯urowski <pzurowski@post.pl>
 
  *********************************************************************
  * This program uses the libpap for best portability.                *
@@ -55,10 +56,14 @@
 #include "pcap.h"
 #include "utils.h"
 
+#include "db_mysql.h"
+
 struct AllLogsType * pAllLogs = NULL;
 extern int run_as_daemon;
 extern struct OptionsType Options;
 
+extern DbMysqlConn MysqlConnection;
+
 int main(int argc, char *argv[]) {
   struct ip *p_packet;
   struct AllLogsType * pTempLog;
@@ -66,6 +71,7 @@
   ParseCmdLine(argc, argv);
   
   Init();
+  atexit(ipfm_mysql_wipepass);
   
   if (run_as_daemon) {
     /* Check PID */
diff -urN ipfm-0.12.0pre1-orig/source/Makefile.in ipfm-0.12.0pre1/source/Makefile.in
--- ipfm-0.12.0pre1-orig/source/Makefile.in	2004-04-08 17:51:28.000000000 +0200
+++ ipfm-0.12.0pre1/source/Makefile.in	2004-04-09 14:37:50.000000000 +0200
@@ -1,6 +1,7 @@
 #
 # Makefile for ipfm sources
 # Copyright (c) 1999-2002 Robert CHERAMY <robert@cheramy.net>
+# Copyright (c) 2004      Pawe³ ¯urowski <pzurowski@post.pl>
 #
 
 include ../Makefile.common
@@ -24,6 +25,7 @@
 
 #######################################################################
 SRCS=	ipfm.c   \
+	db_mysql.c \
 	pcap.c   \
 	filter.c \
 	y.tab.c  \
diff -urN ipfm-0.12.0pre1-orig/TODO ipfm-0.12.0pre1/TODO
--- ipfm-0.12.0pre1-orig/TODO	2004-04-08 17:51:28.000000000 +0200
+++ ipfm-0.12.0pre1/TODO	2004-04-09 14:42:55.000000000 +0200
@@ -1,3 +1,4 @@
+- write about mysql support to the man files
 - IPv6
 - RedHat pcap problem
 - CPU optimisations in lists (Filter and Data)
